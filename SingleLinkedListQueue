//: Playground - noun: a place where people can play

import Foundation

class Node<T: Equatable> {
    var queuedNodeValue: T? = nil
    var nextQueuedNode: Node? = nil
}

class LinkedQueued<T: Equatable> {
    var length = 0
    var head = Node<T>()
    
    // create a function to check if the queue or container is empty
    // returns a boolean value
    func isEmpty()-> Bool {
        
        return self.length == 0
        
    } // end of is empty function
    
    
    func enqueue(value: T){
        
        // check if the queue is empty
        // if empty, set the value as the head
        // NB pls is the node not the value that is been queued or add
        
        var newNode = Node<T>()
        newNode.queuedNodeValue = value
        
        if self.head.queuedNodeValue == nil {
            
            // self.head.queuedNodeValue = value
            self.head = newNode
            
        } else{
            
        // if head is not nil, ie the queue is not empty
        // use the principle of queue ie add values only at the end of the queue
        // to add at the end of the queue you must get the pointer to last Node
            
        var lastNode = self.head
        while lastNode.nextQueuedNode != nil {
            
            lastNode = lastNode.nextQueuedNode!
            
        } // end of while loop
            
        //lastNode.queuedNodeValue = value
        lastNode.nextQueuedNode = newNode
            
        }
        
        self.length = self.length + 1
        
    } // end of enqueue function
    
    func dequeue()-> T?{
    
            // get the value of the front element to be removed
            var removedValue = self.head.queuedNodeValue
            // reset the head to be the value of the nextNode there by automatically
            // removing the initial head from the chain
            self.head = self.head.nextQueuedNode!
            self.length = self.length - 1
            return removedValue
    }
}



var msgs = LinkedQueued<String>()
msgs.enqueue("hi dear")
msgs.enqueue("sweet are you back from work")
msgs.enqueue("can you prepare salad for dinner")
msgs.enqueue("I will be working late. See you soon")
msgs.dequeue()
msgs.dequeue()
msgs.dequeue()
